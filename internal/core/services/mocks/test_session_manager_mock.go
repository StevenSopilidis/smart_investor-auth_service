// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports/test_session_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/stevensopi/smart_investor/auth_service/internal/core/domain"
	ports "gitlab.com/stevensopi/smart_investor/auth_service/internal/core/ports"
)

// MockITestSessionManager is a mock of ITestSessionManager interface.
type MockITestSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockITestSessionManagerMockRecorder
}

// MockITestSessionManagerMockRecorder is the mock recorder for MockITestSessionManager.
type MockITestSessionManagerMockRecorder struct {
	mock *MockITestSessionManager
}

// NewMockITestSessionManager creates a new mock instance.
func NewMockITestSessionManager(ctrl *gomock.Controller) *MockITestSessionManager {
	mock := &MockITestSessionManager{ctrl: ctrl}
	mock.recorder = &MockITestSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITestSessionManager) EXPECT() *MockITestSessionManagerMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockITestSessionManager) CreateSession(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockITestSessionManagerMockRecorder) CreateSession(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockITestSessionManager)(nil).CreateSession), user)
}

// VerifySession mocks base method.
func (m *MockITestSessionManager) VerifySession(sessionId string) (*ports.TestData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySession", sessionId)
	ret0, _ := ret[0].(*ports.TestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySession indicates an expected call of VerifySession.
func (mr *MockITestSessionManagerMockRecorder) VerifySession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySession", reflect.TypeOf((*MockITestSessionManager)(nil).VerifySession), sessionId)
}
