// Code generated by MockGen. DO NOT EDIT.
// Source: ./ports/user_service_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.com/stevensopi/smart_investor/auth_service/internal/core/domain"
)

// MockIUserServiceClient is a mock of IUserServiceClient interface.
type MockIUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceClientMockRecorder
}

// MockIUserServiceClientMockRecorder is the mock recorder for MockIUserServiceClient.
type MockIUserServiceClientMockRecorder struct {
	mock *MockIUserServiceClient
}

// NewMockIUserServiceClient creates a new mock instance.
func NewMockIUserServiceClient(ctrl *gomock.Controller) *MockIUserServiceClient {
	mock := &MockIUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockIUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserServiceClient) EXPECT() *MockIUserServiceClientMockRecorder {
	return m.recorder
}

// FindUserByEmail mocks base method.
func (m *MockIUserServiceClient) FindUserByEmail(email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockIUserServiceClientMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockIUserServiceClient)(nil).FindUserByEmail), email)
}
